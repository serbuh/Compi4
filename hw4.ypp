%{
	#include <iostream>
	#include <string>
	#include <sstream>
	#include "SymbolTable.hpp"
	
	#include "bp.hpp"	
	using namespace output;
	using namespace std;

	
	extern int yylineno;
	extern int yylex();
	void yyerror(const char*);
	string getType(Type type);
	bool isTemperature(Type type);
	
	#define YYERROR_VERBOSE 1
	#define YYDEBUG 1
	
	SymbolTable st = SymbolTable();

	void openNewScope();
	void closeScope();

	string C2F(string place);
	string F2C(string place);

	string C2K(string place);
	string K2C(string place);

	string F2K(string place);
	string K2F(string place);

	string convertValue(Type t1 , Type t2 , string place);
	void do_foreach(string ID_id, Type TempType, string Exp_place, string aop);

	int inCaseDepth = 0;
	int inWhileDepth = 0;
	list<bool> magicScopes;
%}

%token INT STRING TRUE FALSE NUM CASE LP RC COLON SC LC COMMENT
%token CELSIUS FAHRENHEIT KELVIN PRINT INPUT ID IF WHILE BREAK BOOL SWITCH FOREACH

%nonassoc RP
%right ELSE
%right ASSIGN
%left OR
%left AND
%left REL_OP
%left PLUS MINUS
%left MULT DIV
%right NOT

%%
//rules
Prog : M_NewScope Statements M_CloseScope						{};

Statements : Statements Statement M_BP							{
																	bp($2.nextlist, $3.instruct);
																	$$.nextlist = $3.nextlist;
																	$$.breaklist = merge($1.breaklist, $2.breaklist);
																}

		   | Statement M_BP				  						{
		   															bp($1.nextlist, $2.instruct);
		   															$$.nextlist = $1.nextlist;
		   															$$.breaklist = $1.breaklist;
		   														};


Statement : LC M_NewScope Statements RC M_CloseScope			{
																	$$.nextlist = $3.nextlist;
																	$$.breaklist = $3.breaklist;
																}

		  | Type ID SC 											{
		  															if(st.contains($2.id)){
		  																errorDef(yylineno,$2.id.c_str());
		  																exit(1);
		  															}
		  															else{
		  																st.addElement($2.id,getType($1.type),newTemp(),false);
		  															}
		  														}

		  | Type ID ASSIGN Exp SC 								{
		  															if(st.contains($2.id)){
		  																errorDef(yylineno,$2.id.c_str());
		  																exit(1);
		  															}
		  															else{
		  																ostringstream stream;
			  															if($1.type == INT_T || $1.type == BOOL_T){
																			if($1.type == $4.type){
																				st.addElement($2.id,getType($1.type),newTemp(),true);
																				
																				if ($1.type == INT_T){
																					stream << st.getPlace($2.id) << "=" << $4.place;	
																					emit(stream.str());
																				} else if ($1.type == BOOL_T) {

																					bp($4.truelist, next());
																					stream << st.getPlace($2.id) << "=" << 1;
																					emit(stream.str());

																					stream.str("");
																					stream << "goto " << next() + 2;
																					emit(stream.str());

																					bp($4.falselist, next());
																					stream.str("");
																					stream << st.getPlace($2.id) << "=" << 0;
																					emit(stream.str());

																				}

																			}
																			else{
																				errorMismatch(yylineno);
			  																	exit(1);
																			}
																		}
																		else if(isTemperature($1.type)){
																			if($4.type == INT_T || $4.type == BOOL_T){
																				errorMismatch(yylineno);
			  																	exit(1);
																			}
																			else{
																				// add value + type conversion if needed
																				st.addElement($2.id,getType($1.type), newTemp(), true);
																				stream << st.getPlace($2.id) << "=";
																				stream << convertValue($1.type, $4.type, $4.place); 
																				emit(stream.str());
																			}
																		}
																		// initialize flag up
																		st.setInit($2.id);
																		//cout << $2.id << " initialized = " << "(set)" << endl;
//////////////////////////////////
																	}	
		  														}

		  | ID ASSIGN Exp SC 									{
		  															if(st.contains($1.id)){
		  																
		  																Type type = st.find($1.id);
		  																ostringstream stream;
																		if(type == INT_T || type == BOOL_T){
																			if(type == $3.type){
																				if(type == INT_T){
		  																			stream << st.getPlace($1.id) << "=";
																					stream << $3.place;
																					emit(stream.str());

																				} else if(type == BOOL_T){

																					bp($3.truelist, next());
																					stream << st.getPlace($1.id) << "=" << 1;
																					emit(stream.str());

																					stream.str("");
																					stream << "goto " << next() + 2;
																					emit(stream.str());

																					bp($3.falselist, next());
																					stream.str("");
																					stream << st.getPlace($1.id) << "=" << 0;
																					emit(stream.str());
																				}
																			}
																			else{
																				errorMismatch(yylineno);
			  																	exit(1);
																			}
																		}
																		else if(isTemperature(type)){
																			if($3.type == INT_T || $3.type == BOOL_T){
																				errorMismatch(yylineno);
			  																	exit(1);
																			}
																			else{
		  																		stream << st.getPlace($1.id) << "=";
																				stream << convertValue(type, $3.type, $3.place);
																				emit(stream.str());
																			}
																		}
																		// initialize flag up
																		st.setInit($1.id);
																		//cout << $1.id << " initialized = " << "(set)" << endl;
//////////////////////////////////
		  															}
		  															else{
		  																errorUndef(yylineno,$1.id.c_str());
		  																exit(1);
		  															}
		  														}

		  | PRINT ID SC 										{
		  															if(st.contains($2.id)){
		  																Type type = st.find($2.id);
		  																if(isTemperature(type) || type == INT_T){
		  																	ostringstream stream;
		  																	stream << "print " << st.getPlace($2.id);
		  																	emit(stream.str());
		  																}
		  																else{
		  																	errorMismatch(yylineno);
			  																exit(1);
		  																}
		  															}
		  															else{
		  																errorUndef(yylineno,$2.id.c_str());
		  																exit(1);
		  															}
		  														}

		  | PRINT STRING SC 									{
		  															ostringstream stream;
		  															stream << "print " << $2.string;
		  															emit(stream.str());
		  														}

		  | INPUT ID SC 										{
		  															if(st.contains($2.id)){
		  																ostringstream stream;
		  																Type type = st.find($2.id);
		  																if(isTemperature(type) || type == INT_T){
		  																	//add input functions
		  																	stream << "input " << st.getPlace($2.id);
		  																	emit(stream.str());
		  																}
		  																else{
		  																	errorMismatch(yylineno);
			  																exit(1);
		  																}
		  															}
		  															else{
		  																errorUndef(yylineno,$2.id.c_str());
		  																exit(1);
		  															}	
		  														}

		  | IF LP BoolExp RP M_NewIfScope M_BP Statement M_CloseIfScope	{ 
		  															bp($3.truelist, $6.instruct);
		  															$$.nextlist = merge($3.falselist, $7.nextlist);
		  															$$.breaklist = $7.breaklist;
		  														}

		  | IF LP BoolExp RP M_NewIfScope M_BP Statement M_CloseIfScope ELSE M_NewIfScope N_BP M_BP Statement M_CloseIfScope  	{
		  															bp($3.truelist, $6.instruct);
		  															bp($3.falselist, $12.instruct);
		  															$$.nextlist = merge( merge($7.nextlist, $11.nextlist), $13.nextlist);
		  															$$.breaklist = merge( $7.breaklist, $13.breaklist);
		  														}

		  | WHILE LP M_BP BoolExp RP M_NewWhileScope M_BP Statement M_CloseWhileScope	{
		  															bp($8.nextlist, $3.instruct);
		  															bp($4.truelist, $7.instruct);
		  															$$.nextlist = merge( $4.falselist, $8.breaklist);

		  															ostringstream stream;
																	stream << "goto " << $3.instruct;
																	emit(stream.str());
		  														}

		  | BREAK SC 											{
		  															if(inWhileDepth == 0){
		  																errorUnexpectedBreak(yylineno);
		  																exit(1); 
		  															}
		  															$$.breaklist = makelist(next());	
																	emit("goto ");
		  														}

		  | SWITCH LP SwitchExp RP N_BP LC CasesList RC 		{
		  															bp($5.nextlist, next());
		  															while(!$7.caselist.empty()){

			  															CaseElem case_elem_top = $7.caselist.top();
																		$7.caselist.pop();	
																		
																		ostringstream stream;
																		int elem_instr = get<0>(case_elem_top);
																		int elem_num = get<1>(case_elem_top);
																		Type elem_type = get<2>(case_elem_top);
																		string converted_swtch_exp = convertValue(elem_type, $3.type, $3.place);

																		stream << "if " << converted_swtch_exp << "==" << elem_num << " goto " << elem_instr;
																		emit(stream.str());
		  															}
		  															$$.nextlist = merge($7.nextlist, makelist(next()));
		  															$$.breaklist = $7.breaklist;
		  															emit("goto ");
		  														}

		  | FOREACH LP ID TemperatureType RP PLUS Exp SC 		{	
		  															// Check if ID declared
		  															if(!st.contains($3.id)){
																		errorUndef(yylineno,$3.id.c_str());
		  																exit(1);
																	} else {
																		do_foreach($3.id, $4.type, $7.place, "+");
																	}
																};

		  | FOREACH LP ID TemperatureType RP MINUS Exp SC 		{	
																// Check if ID declared
		  															if(!st.contains($3.id)){
																		errorUndef(yylineno,$3.id.c_str());
		  																exit(1);
																	} else {
																		do_foreach($3.id, $4.type, $7.place, "-");
																	}
																};

		  | FOREACH LP ID TemperatureType RP MULT Exp SC 		{	
																	// Check if ID declared
		  															if(!st.contains($3.id)){
																		errorUndef(yylineno,$3.id.c_str());
		  																exit(1);
																	} else {
																		do_foreach($3.id, $4.type, $7.place, "*");
																	}
																};

		  | FOREACH LP ID TemperatureType RP DIV Exp SC 		{	
																	// Check if ID declared
		  															if(!st.contains($3.id)){
																		errorUndef(yylineno,$3.id.c_str());
		  																exit(1);
																	} else {
																		do_foreach($3.id, $4.type, $7.place, "/");
																	}
																};

		  | COMMENT												{};

SwitchExp : Exp													{
																	if(!isTemperature($1.type)){
																		errorMismatch(yylineno);
																		exit(1);
			  														}

			  														$$.place = $1.place;
																};


BoolExp : Exp													{
																	if($1.type != BOOL_T){
		  																errorMismatch(yylineno);
			  															exit(1);
			  														}

			  														$$.truelist = $1.truelist;
			  														$$.falselist = $1.falselist;
																};

CasesList : CaseStat CasesList 									{
																	$$.caselist = $2.caselist;
																	CaseElem case_elem($1.instruct, $1.num, $1.type);
																	$$.caselist.push(case_elem);

																	$$.nextlist=merge($2.nextlist,$1.nextlist);
																	$$.breaklist=merge($2.breaklist,$1.breaklist);
																}

		  | CaseStat 											{
																	CaseElem case_elem($1.instruct, $1.num, $1.type);
		  															$$.caselist = makestack(case_elem);
		  															
																	$$.nextlist = $1.nextlist;
																	$$.breaklist = $1.breaklist;
		  														};

CaseStat : CASE NUM TemperatureType COLON M_NewCaseScope M_BP Statement N_BP BREAK SC M_CloseCaseScope	{
																	$$.instruct = $6.instruct;
																	$$.num = $2.num;
																	$$.type = $3.type;

																	$$.nextlist = merge($7.nextlist, $8.nextlist); 
																	$$.breaklist = $7.breaklist;
																};

TemperatureType : CELSIUS 										{$$.type = $1.type;}
			   | FAHRENHEIT										{$$.type = $1.type;}
			   | KELVIN											{$$.type = $1.type;};

Type : TemperatureType											{$$.type = $1.type;}
	 | INT 														{$$.type = $1.type;}
	 | BOOL 													{$$.type = $1.type;};

M_BP : 															{
																	$$.instruct = next();
																};

N_BP :															{
																	$$.nextlist = makelist(next());

																	ostringstream stream;
																	stream << "goto ";
																	emit(stream.str());
																};

M_NewScope : 													{
																	magicScopes.push_front(false);
																	openNewScope();
																};

M_CloseScope :													{
																	closeScope();
																	magicScopes.pop_front();
																};

M_NewIfScope : 													{
																	magicScopes.push_front(true);
																	openNewScope();
																};

M_CloseIfScope : 												{
																	closeScope();
																	magicScopes.pop_front();
																};

M_NewCaseScope : 												{
																	magicScopes.push_front(true);
																	openNewScope();
																};

M_CloseCaseScope : 												{
																	closeScope();																	magicScopes.pop_front();

																};

M_NewWhileScope : 												{
																	magicScopes.push_front(true);
																	inWhileDepth++;
																	openNewScope();
																};

M_CloseWhileScope : 											{
																	closeScope();
																	magicScopes.pop_front();
																	inWhileDepth--;
																};

Exp : LP Exp RP 												{
																	$$.type = $2.type;
																	if($2.type != BOOL_T){
																		$$.place = $2.place;
																	} else {
																		$$.truelist = $2.truelist;
																		$$.falselist = $2.falselist;
																	}
																}

    | Exp PLUS Exp												{
    																ostringstream stream;
    																if($1.type == INT_T && $3.type == INT_T){
    																	//add values
    																	$$.place = newTemp();
    																	stream << $$.place << "=" << $1.place << "+" << $3.place;
    																	emit(stream.str());
    																	$$.type = $1.type;
    																}
    																else if(isTemperature($1.type) && isTemperature($3.type)){
    																	//add and possibly convert types
    																	string newPlace = convertValue($1.type,$3.type,$3.place); 
    																	$$.place = newTemp();
    																	stream << $$.place << "=" << $1.place << "+" << newPlace;
    																	emit(stream.str());
    																	$$.type = $1.type;
    																}
    																else{
    																	errorMismatch(yylineno);
			  															exit(1);
    																}
    															}

    | Exp MINUS Exp												{
    																ostringstream stream;
    																if($1.type == INT_T && $3.type == INT_T){
    																	//subtract values
    																	$$.place = newTemp();
    																	stream << $$.place << "=" << $1.place << "-" << $3.place;
    																	emit(stream.str());
    																	$$.type = $1.type;
    																}
    																else if(isTemperature($1.type) && isTemperature($3.type)){
    																	//subtract and possibly convert types
    																	string newPlace = convertValue($1.type,$3.type,$3.place); 
    																	$$.place = newTemp();
    																	stream << $$.place << "=" << $1.place << "-" << newPlace;
    																	emit(stream.str());
    																	$$.type = $1.type;
    																}
    																else{
    																	errorMismatch(yylineno);
			  															exit(1);
    																}
    															}

    | Exp MULT Exp												{
    																ostringstream stream;
    																if(isTemperature($1.type) && isTemperature($3.type)){
    																	errorMismatch(yylineno);
			  															exit(1);
    																}
    																else if(isTemperature($1.type) && $3.type == INT_T){
    																	//mul values...
    																	$$.place = newTemp();
    																	stream << $$.place << "=" << $1.place << "*" << $3.place;
    																	emit(stream.str());
    																	$$.type = $1.type;
    																}
    																else if(isTemperature($3.type) && $1.type == INT_T){
    																	//mul values...
    																	$$.place = newTemp();
    																	stream << $$.place << "=" << $1.place << "*" << $3.place;
    																	emit(stream.str());
    																	$$.type = $3.type;
    																}
    																else if($1.type == INT_T && $3.type == INT_T){
    																	//mul values...
    																	$$.place = newTemp();
    																	stream << $$.place << "=" << $1.place << "*" << $3.place;
    																	emit(stream.str());
    																	$$.type = INT_T;	
    																}
    																else{
    																	errorMismatch(yylineno);
			  															exit(1);
    																}
    															}

    | Exp DIV Exp												{
        															ostringstream stream;
    																if(isTemperature($1.type) && isTemperature($3.type)){
    																	//div temps and get int...
    																	//TODO convert
    																	string newPlace = convertValue($1.type,$3.type,$3.place); 
    																	$$.place = newTemp();
    																	stream << $$.place << "=" << $1.place << "/" << newPlace;
    																	emit(stream.str());
    																	$$.type = INT_T;
    																}
    																else if(isTemperature($1.type) && $3.type == INT_T){
    																	//div values...
    																	$$.place = newTemp();
    																	stream << $$.place << "=" << $1.place << "/" << $3.place;
    																	emit(stream.str());
    																	$$.type = $1.type;
    																}
    																else if(isTemperature($3.type) && $1.type == INT_T){
    																	errorMismatch(yylineno);
			  															exit(1);
    																}
    																else if($1.type == INT_T && $3.type == INT_T){
    																	//div values...
    																	$$.place = newTemp();
    																	stream << $$.place << "=" << $1.place << "/" << $3.place;
    																	emit(stream.str());
    																	$$.type = INT_T;	
    																}
    																else{
    																	errorMismatch(yylineno);
			  															exit(1);
    																}
    															}

	| ID														{
																	if(st.contains($1.id)){

																		$$.place = st.getPlace($1.id);
																		$$.type = st.find($1.id);

																		if ($$.type == BOOL_T){
																			$$.truelist = makelist(next());
																			ostringstream stream_t;
																			stream_t << "if " << $$.place << "==" << 1 <<" goto ";
																			emit(stream_t.str());

																			$$.falselist = makelist(next());
																			ostringstream stream_f;
										   									stream_f << "if " << $$.place << "==" << 0 <<" goto ";
										   									emit(stream_f.str());
																		}
																	}
																	else{
																		errorUndef(yylineno,$1.id.c_str());
		  																exit(1);
																	}
																}

	| NUM														{
																	ostringstream stream;
																	$$.place = newTemp();
																	stream << $$.place << "=" << $1.num;
																	emit(stream.str());
																	$$.type = INT_T;
																}

	| NUM TemperatureType										{
																	ostringstream stream;
																	$$.place = newTemp();
																	stream << $$.place << "=" << $1.num;
																	emit(stream.str());
																	$$.type = $2.type;
																}

	| TRUE														{
																	$$.type = $1.type;

																	$$.truelist = makelist(next());
																	ostringstream stream;
																	stream << "goto ";
																	emit(stream.str());
																}

	| FALSE														{	
																	$$.type = $1.type;

																	$$.falselist = makelist(next());
																	ostringstream stream;
																	stream << "goto ";
																	emit(stream.str());
																}

	| NOT Exp													{
																	if($2.type == BOOL_T){
																		// assign value...
																		//$$.boolean = !$2.boolean;
																		$$.type = BOOL_T;
																	}
																	else{
																		errorMismatch(yylineno);
			  															exit(1);
																	}

																	$$.truelist = $2.falselist;
																	$$.falselist = $2.truelist;
																}

	| Exp OR M_BP Exp												{
																	if($1.type == BOOL_T && $4.type == BOOL_T){
																		$$.type = BOOL_T;
																	}
																	else{
																		errorMismatch(yylineno);
			  															exit(1);
																	}
																	
																	bp($1.falselist, $3.instruct);
																	$$.truelist = merge($1.truelist, $4.truelist);
																	$$.falselist = $4.falselist;
																}

	| Exp AND M_BP Exp											{
																	if($1.type == BOOL_T && $4.type == BOOL_T){
																		$$.type = BOOL_T;
																	}
																	else{
																		errorMismatch(yylineno);
			  															exit(1);
																	}

																	bp($1.truelist, $3.instruct);
																	$$.truelist = $4.truelist;
																	$$.falselist = merge($1.falselist, $4.falselist);
																}

	| Exp REL_OP Exp											{
																	string lexp = $1.place;
																	string rexp = $3.place;
																	if(isTemperature($1.type) && isTemperature($3.type)){
    																	$$.type = BOOL_T;
    																	rexp = convertValue($1.type, $3.type, $3.place); 
    																}
    																else if($1.type == INT_T && $3.type == INT_T){
    																	$$.type = BOOL_T;
    																}
    																else{
    																	errorMismatch(yylineno);
			  															exit(1);
    																}

    													
																	if (!$2.rel_op.compare(">=") || !$2.rel_op.compare("<=")){

																		string rel_op_second;
																		if(!$2.rel_op.compare(">=")){
																			rel_op_second = ">";
																		} else if(!$2.rel_op.compare("<=")) {
																			rel_op_second = "<";
																		}


																		list<int> truelist1 = makelist(next());
																		list<int> truelist2 = makelist(next()+1);
																		$$.truelist = merge(truelist1, truelist2);
																		$$.falselist = makelist(next()+2);

																		ostringstream stream_1;
																		stream_1 << "if " << lexp << rel_op_second << rexp << " goto ";
																		emit(stream_1.str());
																		
																		ostringstream stream_2;
																		stream_2 << "if " << lexp << "==" << rexp << " goto ";
																		emit(stream_2.str());

																	} else {
																		$$.truelist = makelist(next());
	    																$$.falselist = makelist(next()+1);

																		ostringstream stream;
																		stream << "if " << lexp << $2.rel_op << rexp << " goto ";
																		emit(stream.str());
																	}
																	
																	ostringstream stream;
																	stream << "goto ";
																	emit(stream.str());
																};

%%

void openNewScope(){
	st.addTable();
}

void closeScope(){
	bool magicScopeFlag = magicScopes.front();
	if (magicScopeFlag && st.tableSize() == 0){
		st.removeTable();
		return;
	}
	//endScope();
	//st.printTable();
	st.removeTable();
}

string getType(Type type){
	string t;
	switch(type){
		case CELSIUS_T:
			t = "CELSIUS";
			break;
		case FAHRENHEIT_T:
			t = "FAHRENHEIT";
			break;
		case KELVIN_T:
			t = "KELVIN";
			break;
		case BOOL_T:
			t = "BOOL";
			break;
		case INT_T:
			t = "INT";
			break;
		case STRING_T:
			t = "STRING";
			break;
	}
	return t;
}

bool isTemperature(Type type){
	return (type == FAHRENHEIT_T || type == CELSIUS_T || type == KELVIN_T);
}

void yyerror(const char* s){

	errorSyn(yylineno);

	exit(1);
}

string C2F(string place){
	//return ((C * 9) / 5) + 32;
	ostringstream stream;
	string newPlace1 = newTemp() , newPlace2 = newTemp() , newPlace3 = newTemp();
	stream << newPlace1 << "=" << place << "*9";
	emit(stream.str());
	stream.str("");
	stream << newPlace2 << "=" << newPlace1 << "/5";
	emit(stream.str());
	stream.str("");
	stream << newPlace3 << "=" << newPlace2 << "+32";
	emit(stream.str());
	return newPlace3;

}

string F2C(string place){
	//return ((F - 32) * 5) / 9;
	ostringstream stream;
	string newPlace1 = newTemp() , newPlace2 = newTemp() , newPlace3 = newTemp();
	stream << newPlace1 << "=" << place << "-32";
	emit(stream.str());
	stream.str("");;
	stream << newPlace2 << "=" << newPlace1 << "*5";
	emit(stream.str());
	stream.str("");;
	stream << newPlace3 << "=" << newPlace2 << "/9";
	emit(stream.str());
	return newPlace3;
}

string C2K(string place){
	//return C + 273;
	ostringstream stream;
	string newPlace = newTemp();
	stream << newPlace << "=" << place << "+273";
	emit(stream.str());
	return newPlace;
}

string K2C(string place){
	//return K - 273;
	ostringstream stream;
	string newPlace = newTemp();
	stream << newPlace << "=" << place << "-273";
	emit(stream.str());
	return newPlace;
}

string F2K(string place){
	return C2K(F2C(place));
}

string K2F(string place){
	return C2F(K2C(place));	
}

string convertValue(Type t1 , Type t2 , string place){
	
	if(t1 == CELSIUS_T && t2 == FAHRENHEIT_T){
		return F2C(place);
	}
	else if(t1 == FAHRENHEIT_T && t2 == CELSIUS_T){
		return C2F(place);
	}
	else if(t1 == CELSIUS_T && t2 == KELVIN_T){
		return K2C(place);
	}
	else if(t1 == KELVIN_T && t2 == CELSIUS_T){
		return C2K(place);
	}
	else if(t1 == FAHRENHEIT_T && t2 == KELVIN_T){
		return K2F(place);
	}
	else if(t1 == KELVIN_T && t2 == FAHRENHEIT_T){
		return F2K(place);
	}
	else{
		return place;
	}
}

//string ID_id = $3.id;
//Type TempType = $4.type; 
//string Exp_place = $7.place;

void do_foreach(string ID_id, Type TempType, string Exp_place, string aop){ 
	string id_place = st.getPlace(ID_id);
	Type id_type = st.find(ID_id);

	// Check id type is INT
	if(id_type != INT_T){
		errorMismatch(yylineno);
		exit(1);
	}

	// init id to 2 if not initilized
	//cout << ID_id << " initialized = " << st.isInit(ID_id) << endl;
//////////////////////////////////
	if(!st.isInit(ID_id)){
		ostringstream stream;
		stream << st.getPlace(ID_id) << "=2";
		emit(stream.str());
		st.setInit(ID_id);
	}

	// Create list of values of TemperatureType
	list<tableElement> listValOfType= st.getElementsOfType(TempType);

	// Iterate over a list of values of TemperatureType and do OP EXP id times
	for (list<tableElement>::iterator it = listValOfType.begin(); it != listValOfType.end(); it++){
		string elem_place = (get<3>(*it));
		string elem_id = (get<0>(*it));

		// Make any uninitialized elem initialized to 0
		//cout << elem_id << " initialized = " << st.isInit(elem_id) << endl;
//////////////////////////////////
		if(!st.isInit(elem_id)){
			ostringstream stream;
			stream << elem_place << "=0";
			emit(stream.str());
			st.setInit(st.getPlace(elem_place));
		}

		// Generate the OP EXP (xID times) block
		ostringstream stream;

		int if_lbl = next() + 1;
		int body_lbl = next() + 3;
		int next_lbl = next() + 6;

		// counter = 0
		string counter_place = newTemp();
		stream << counter_place << "=0";
		emit(stream.str());
		stream.str("");

		// if_lbl: if count < id goto body_lbl
		stream << "if " << counter_place << "<" << id_place << " goto " << body_lbl;
		emit(stream.str());
		stream.str("");

		// goto next_lbl
		stream << "goto " << next_lbl;
		emit(stream.str());
		stream.str("");

		// body_lbl: elem = elem + exp
		stream << elem_place << "=" << elem_place << aop << Exp_place;
		emit(stream.str());
		stream.str("");

		// counter = counter + 1
		stream << counter_place << "=" << counter_place << "+1";
		emit(stream.str());
		stream.str("");

		// goto if
		stream << "goto " << if_lbl;
		emit(stream.str());
		stream.str("");
	}
}

int main()
{
	yyparse();
	printBuffer();
}

